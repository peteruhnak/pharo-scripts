QACActionManager {
	#iconLibrary : QACIconLibrary {
		#customIcons : { }
	},
	#rootFolder : QACActionFolder {
		#id : UUID [ 'ce503d040e05495d98acffa883110a74' ],
		#iconID : '',
		#actionItems : SortedCollection [
			QACActionFolder {
				#id : UUID [ 'caffb579465c43ea85baf71db66577de' ],
				#name : 'Convenience',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ '8844ac00b2f3458fbd6bbee0712728d9' ],
						#name : 'Common tools',
						#iconID : '',
						#expression : 'GTPlayground openContents:\r\'(CatalogProvider projectNamed: #GitFileTree) installStableVersion.\r(CatalogProvider projectNamed: #Spy2) installStableVersion.\r\'.'
					}
				]
			},
			QACActionFolder {
				#id : UUID [ '07ccb82a406a4119b3c0befb7cdeca29' ],
				#name : 'Debugging',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ 'b8461fa858134c4583541ce545426989' ],
						#name : 'Enable Halt once',
						#iconID : '',
						#expression : 'Halt enableHaltOnce'
					}
				]
			},
			QACActionFolder {
				#id : UUID [ 'acf168b0421a41788b50c96a8435784d' ],
				#name : 'Extensions',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ '2a2a06bd2c24496b9680412b33dbc215' ],
						#name : 'Zoomable Roassal',
						#iconID : '',
						#expression : 'RTAbstractContextInteraction subclass: #RTZoomableViewContextInteraction\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Roassal2GT-Glamour-Roassal-Interaction\'.\r\r#RTZoomableViewContextInteraction asClass compile: \'initializeElement: aView\r\taView @ RTZoomableView\' classified: \'hooks\'.\r\t\rRTInteractiveViewContext compile: \'interactionsToBeRegistered\r\t^ Array with: RTSelectableElementsContextInteraction with: RTResizeableViewContextInteraction with: RTZoomableViewContextInteraction\' classified: \'hooks\''
					}
				]
			},
			QACAction {
				#id : UUID [ '800b969e98874a5587da9b53bbe976be' ],
				#name : 'Open .config/pharo',
				#iconID : '',
				#expression : ''
			},
			QACActionFolder {
				#id : UUID [ '70e251b8d3be48609cda4d3b69f927d0' ],
				#name : 'Opening folders',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ '0bd08f7b18d147deb23f8323cbcedffd' ],
						#name : 'Inspect directory',
						#iconID : '',
						#expression : '(UIManager default chooseDirectory) inspect'
					},
					QACAction {
						#id : UUID [ '371076ddfc2342f7a3bf57acf493f4c8' ],
						#name : 'Inspect file',
						#iconID : '',
						#expression : '(UIManager default chooseFileMatching: #(\'*\')) inspect'
					},
					QACAction {
						#id : UUID [ '2f76be7a3d1b478ab1ce5980a50f8c45' ],
						#name : 'open .config/pharo',
						#iconID : '',
						#expression : '(FileLocator preferences asFileReference / \'pharo\') inspect'
					},
					QACAction {
						#id : UUID [ 'a059020b09754166969c675910cf22a0' ],
						#name : 'open zenity playground',
						#iconID : '',
						#expression : '|page playground|\r(page := GTPlayPage new)\r\tsaveContent: \'(PipeableOSProcess command: \'\'zenity --file-selection\'\') output trim.\r\t\r(PipeableOSProcess command: \'\'zenity --file-selection --file-filter=\'\'\'\'XML files (xml, xmi, graphml) | *.xml *.xmi *.graphml\'\'\'\' --file-filter=\'\'\'\'All files | *\'\'\'\'\'\') output trim.\r\t\'.\r(playground := GTPlayground new)\r\topenOn: page.'
					}
				]
			},
			QACActionFolder {
				#id : UUID [ 'fc75b7811ae448ff8ed7f149631ed368' ],
				#name : 'QuickAccess i/e',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ '4348947138d24bdfa3f051dd9084c0cf' ],
						#name : 'Export',
						#iconID : '',
						#expression : '(FileLocator preferences asFileReference / \'pharo\' / \'5.0\' / \'quickaccess.qac\')\r\tensureDelete;\r\twriteStreamDo: [ :stream |\r\t\t(STON writer on: stream)\r\t\t\tprettyPrint: true;\r\t\t\tnewLine: String lf;\r\t\t\tnextPut: QACActionManager default\r].'
					},
					QACAction {
						#id : UUID [ '4b6d622d31f449e098a9261afd97ddad' ],
						#name : 'Import',
						#iconID : '',
						#expression : '#QACActionManager asClass default\r\t\t\t\t\timport: ((FileLocator preferences asFileReference / \'pharo\' / \'5.0\' / \'quickaccess.qac\')).'
					}
				]
			},
			QACActionFolder {
				#id : UUID [ 'c6eaf8d583a34fb8aac3780b917fecc4' ],
				#name : 'Repositories',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ '31416f4fe8e142bc8738687d51630db3' ],
						#name : 'Cache QuickAccess',
						#iconID : '',
						#expression : '|source destination goSource goDestination sortBlock re fileBlocks files filesSorted destinationFiles|\r"Based on Uko\'s script https://gist.github.com/Uko/6898022"\r\r"\rConfigurationOfQuickAccess methods select: [ :each |\r\teach sourceCode includesSubstring: \'spec repository: \'\'http://smalltalkhub.com/mc/TorstenBergmann/QuickAccess/main/\'\'\'.\r] thenDo: [ :each |\r\tConfigurationOfQuickAccess compile: (each sourceCode\r\t\tcopyReplaceAll: \'spec repository: \'\'http://smalltalkhub.com/mc/TorstenBergmann/QuickAccess/main/\'\'\'\r\t\twith: \'spec repository: \'\'/home/peter/prog/QuickAccess/repository\'\'\')\r].\r"\r\r"Get reference to the source repository"\rsource := MCSmalltalkhubRepository allInstances detect: [ :each |\r\teach location includesSubstring: \'QuickAccess\'\r].\r\r"Get reference to the target repository"\rdestination := MCSubDirectoryRepository allInstances detect: [ :each |\r\teach location includesSubstring: \'QuickAccess/repository\'\r].\r\r"Setup Gofer"\rgoSource := Gofer new repository: source.\rgoDestination := Gofer new repository: destination.\r\r"The packages obtained from Gofer are in random order... so some sorting has to be done so the git history is nicer."\rsortBlock := [ :x : y |\r\t(x second = y second) ifTrue: [ x fourth asNumber <= y fourth asNumber ]\r\tifFalse: [ x second < y second ].\r].\r\r"My-Package-Author.Number"\rre := \'^(.+)-([^-]+)\\.(\\d+)$\' asRegex.\rfileBlocks := source allVersionNames collect: [ :each | \r\tre search: each.\r\t{ \r\t\tre subexpression: 1. "first - full string"\r\t\tre subexpression: 2. "second - package name"\r\t\tre subexpression: 3. "third - author name"\r\t\tre subexpression: 4. "fourth - commit name"\r\t}\r].\rfilesSorted := fileBlocks asSortedCollection: sortBlock.\r\rfiles := (filesSorted collect: [ :x | x first ]) asArray.\r\r(goSource allResolved select: [ :resolved | files anySatisfy: [ :each |\r  resolved name = each ] ]) do: [ :each | goSource package: each packageName ].\r\rgoSource fetch. "downloads all mcz on your computer"\rdestinationFiles := destination allVersionNames. "checks what files are already at destination"\r\rfiles reject: [ :file | destinationFiles includes: file ] thenDo: [ :file |\r  goDestination version: file ]. "selects only the mcz that are not yet at destination"\r\rgoDestination push. "sends everything to new repository"'
					},
					QACAction {
						#id : UUID [ '17d0e1e413130d00a468cbd805e8cb9a' ],
						#name : 'Inspect Baseline Registry',
						#iconID : '',
						#expression : 'MetacelloProjectRegistration registry baselineRegistry inspect'
					},
					QACAction {
						#id : UUID [ '3f61b67d72fa493dae1309eaedd5c31b' ],
						#name : 'Install GitFileTree project (OSProcess)',
						#iconID : '',
						#expression : '|projects ui layout|\rprojects := (FileLocator home asFileReference / \'prog\') children\r\tselect: [ :each | (each childrenMatching: \'repository\') isNotEmpty ]\r\tthenCollect: [ :each | each / \'repository\' ].\rprojects := projects sort: [ :a :b | a pathString asLowercase < b pathString asLowercase ].\r\rui := DynamicComposableModel new.\rui title: \'Install local GitFileTree project\'.\rui instantiateModels: #(projects DropListModel).\rui projects\r\titems: projects;\r\tdisplayBlock: [ :d | d parent basename ,\'/\', d basename ].\r\rlayout := SpecColumnLayout composed\r\tnewRow: [ :r | r add: #projects ] height: ComposableModel toolbarHeight;\r\tnewRow: [ :r | ].\r\t\r(ui openDialogWithSpecLayout: layout)\r\tokAction: [\r\t\t(Smalltalk hasClassNamed: #BaselineOfGitFileTree) ifFalse: [\r\t\t\t(CatalogProvider projectNamed: \'OSProcess\')\r\t\t\t\tinstallVersion: #stable.\r\t\t\t(CatalogProvider projectNamed: \'CommandShell\')\r\t\t\t\tinstallVersion: #stable.\r\t\t\t(CatalogProvider projectNamed: \'GitFileTree\')\r\t\t\t\tinstallVersion: #stable.\r\t\t].\r\t\tMetacello new\r\t\t\tbaseline: (((ui projects selectedItem childrenMatching: \'Baseline*.package\') first basename withoutPrefix: \'BaselineOf\') withoutSuffix: \'.package\');\r\t\t\trepository: \'gitfiletree://\', ui projects selectedItem pathString;\r\t\t\tload.\r\t]'
					},
					QACAction {
						#id : UUID [ 'adf69a4e793248b2adae848f6d7b0d5d' ],
						#name : 'Install GitFileTree project (OSSubprocess)',
						#iconID : '',
						#expression : '|projects ui layout|\rprojects := (FileLocator home asFileReference / \'prog\') children\r\tselect: [ :each | (each childrenMatching: \'repository\') isNotEmpty ]\r\tthenCollect: [ :each | each / \'repository\' ].\rprojects := projects sort: [ :a :b | a pathString asLowercase < b pathString asLowercase ].\r\rui := DynamicComposableModel new.\rui title: \'Install local GitFileTree project\'.\rui instantiateModels: #(projects DropListModel).\rui projects\r\titems: projects;\r\tdisplayBlock: [ :d | d parent basename ,\'/\', d basename ].\r\rlayout := SpecColumnLayout composed\r\tnewRow: [ :r | r add: #projects ] height: ComposableModel toolbarHeight;\r\tnewRow: [ :r | ].\r\t\r(ui openDialogWithSpecLayout: layout)\r\tokAction: [\r\t\t(Smalltalk hasClassNamed: #BaselineOfGitFileTree) ifFalse: [\r\t\t\t(CatalogProvider projectNamed: \'GitFileTree\')\r\t\t\t\tinstallVersion: #development.\r\t\t].\r\t\tMetacello new\r\t\t\tbaseline: (((ui projects selectedItem childrenMatching: \'Baseline*.package\') first basename withoutPrefix: \'BaselineOf\') withoutSuffix: \'.package\');\r\t\t\trepository: \'gitfiletree://\', ui projects selectedItem pathString;\r\t\t\tload.\r\t]'
					},
					QACAction {
						#id : UUID [ '78f256a4cd8d4518bf0690ad5943277c' ],
						#name : 'Install GitFileTree project (without GFT loading)',
						#iconID : '',
						#expression : '|projects ui layout|\rprojects := (FileLocator home asFileReference / \'prog\') children\r\tselect: [ :each | (each childrenMatching: \'repository\') isNotEmpty ]\r\tthenCollect: [ :each | each / \'repository\' ].\rprojects := projects sort: [ :a :b | a pathString asLowercase < b pathString asLowercase ].\r\rui := DynamicComposableModel new.\rui title: \'Install local GitFileTree project\'.\rui instantiateModels: #(projects DropListModel).\rui projects\r\titems: projects;\r\tdisplayBlock: [ :d | d parent basename ,\'/\', d basename ].\r\rlayout := SpecColumnLayout composed\r\tnewRow: [ :r | r add: #projects ] height: ComposableModel toolbarHeight;\r\tnewRow: [ :r | ].\r\t\r(ui openDialogWithSpecLayout: layout)\r\tokAction: [\r\t\tMetacello new\r\t\t\tbaseline: (((ui projects selectedItem childrenMatching: \'Baseline*.package\') first basename withoutPrefix: \'BaselineOf\') withoutSuffix: \'.package\');\r\t\t\trepository: \'gitfiletree://\', ui projects selectedItem pathString;\r\t\t\tload.\r\t]'
					},
					QACAction {
						#id : UUID [ 'b931c0a779ea486c9cb7d25a77e4bd16' ],
						#name : 'Kommit packages matching...',
						#iconID : '',
						#expression : '(UIManager default request: \'Package name pattern\' initialAnswer: \'*\') ifNotNil: [ :pat |\r\tKomitter openAndCommitToMonticelloWorkingCopiesFilteredBy: [ :workingCopy |\r\t\tworkingCopy package name matches: pat\r\t].\r].'
					},
					QACAction {
						#id : UUID [ 'da35490923070d00b583be3a07ccb6d5' ],
						#name : 'Load GitFileTree + ShellProxy',
						#iconID : '',
						#expression : '(CatalogProvider projectNamed: \'GitFileTree\')\n\tinstallVersion: #stable.\n\n\t"Use SocketShell instead of ProcessWrapper"\n\tMetacello new\n\t\tbaseline: \'SocketShell\';\n\t\trepository: \'filetree:///D:\\prog\\pharo-shell-proxy/repository\';\n\t\tload.'
					},
					QACAction {
						#id : UUID [ '3e2aa2e59a034df7b9abf383ffdbd698' ],
						#name : 'Load OSProcess with GitFileTree',
						#iconID : '',
						#expression : '(Smalltalk hasClassNamed: #BaselineOfGitFileTree) ifFalse: [\r\t(CatalogProvider projectNamed: \'OSProcess\')\r\t\tinstallVersion: #stable.\r\t(CatalogProvider projectNamed: \'CommandShell\')\r\t\tinstallVersion: #stable.\r\t(CatalogProvider projectNamed: \'GitFileTree\')\r\t\tinstallVersion: #stable.\r].'
					},
					QACAction {
						#id : UUID [ 'b811655c40d34a458efa106f2a31d4c7' ],
						#name : 'Login Pharo60Inbox',
						#iconID : '',
						#expression : '|creds repo |\rcreds := (STON fromStream: (FileLocator preferences asFileReference / \'pharo\' / \'settings.json\') readStream) at: #smalltalkhub.\r\rrepo := (MCHttpRepository allInstances detect: [ :each | each location includesSubstring: \'Pharo60Inbox\' ]).\r\rrepo user: (creds at: #user).\rrepo password: (creds at: #password)'
					},
					QACAction {
						#id : UUID [ '1a99a5b80e6f448783329ab1b6158e6d' ],
						#name : 'Login Roassal2',
						#iconID : '',
						#expression : '|creds repo|\rcreds := (STON fromStream: (FileLocator preferences asFileReference / \'pharo\' / \'settings.json\') readStream) at: #smalltalkhub.\r\rrepo := (MCSmalltalkhubRepository allInstances detect: [ :each | each project = \'Roassal2\' ]).\r\rrepo user: (creds at: #user).\rrepo password: (creds at: #password)'
					},
					QACAction {
						#id : UUID [ '2bdf67770192472a870c9daedf371715' ],
						#name : 'Login STHub repo',
						#iconID : '',
						#expression : '|creds repo repos labels|\rcreds := (STON fromStream: (FileLocator preferences asFileReference / \'pharo\' / \'settings.json\') readStream) at: #smalltalkhub.\r\rrepos := MCSmalltalkhubRepository allInstances sorted: [ :a :b |\r\ta owner < b owner or: [ a owner = b owner and: [ a project < b project ] ]\r].\rlabels := repos collect: [ :each | each owner , \'/\', each project ].\r\rrepo := UIManager default\r\tchooseFrom: labels\r\tvalues: repos.\r\rrepo ifNotNil: [\r\trepo user: (creds at: #user).\r\trepo password: (creds at: #password)\r]'
					},
					QACAction {
						#id : UUID [ 'aeeae04c63080d00900f5fd100306168' ],
						#name : 'OpenPonk - CD load',
						#iconID : '',
						#expression : '|progBase base|\rprogBase := OSPlatform current isWindows\r\tifTrue: [ \'gitfiletree:///D:\\prog\\\' ]\r\tifFalse: [ 1halt ].\r\rbase := OSPlatform current isWindows\r\tifTrue: [ \'gitfiletree:///D:\\OpenPonk\\git\\\' ]\r\tifFalse: [ \'gitfiletree:///home/peter/prog/openponk/git/\' ].\r\r\r(CatalogProvider projectNamed: \'GitFileTree\')\r\tinstallVersion: #stable.\r\t\nOSPlatform current isWindows ifTrue: [\n\t"Use SocketShell instead of ProcessWrapper"\n\tMetacello new\n\t\tbaseline: \'SocketShell\';\n\t\trepository: \'filetree:///D:\\prog\\pharo-shell-proxy/repository\';\n\t\tload.\n].\r\r"Lock file dialog, because it\'s preloaded"\rMetacello new\r\tbaseline: \'FileDialog\';\r\trepository: \'filetree://D:/prog/file-dialog/repository\';\r\tlock.\r\r\r"OpenPonk MetaModel"\rMetacello new\r\tbaseline: \'OpenPonkModel\';\r\trepository: base , \'openponk-model/repository\';\r\tlock.\r\r"OpenPonk"\rMetacello new\r\tbaseline: \'OpenPonk\';\r\trepository: base , \'openponk/repository\';\r\tlock.\r\r"UML DI"\rMetacello new\r\tbaseline: \'UMLShapes\';\r\trepository: base , \'uml-shapes/repository\';\r\tlock.\r\r"UML Class Diagram Editor"\rMetacello new\r\tbaseline: \'ClassEditor\';\r\trepository: base , \'class-editor/repository\';\r\tonWarningLog;\r\tload.\r\rUIManager default message: \'Loading complete\''
					},
					QACAction {
						#id : UUID [ '3adde9f276534d6b80d36a97669d5c56' ],
						#name : 'Remove all unwanted repos',
						#iconID : '',
						#expression : '"Nuking repos I don\'t care about, because they slow down gitfiletree repos and make a mess in Monticello Browser\r\rOf course I can always add it back by hand if the need arises.\r"\r|group|\rgroup := MCRepositoryGroup default.\r\r"All Moose repos"\rgroup repositories select: [ :each |\r\t(each location includesSubstring: \'Moose\') and: [ \r\t\t(each isKindOf: MCCacheRepository) not ]\r] thenDo: [ :each |\r\tgroup removeRepository: each.\r].\r\r"All Pharo repos"\rgroup repositories select: [ :each |\r\t(each location includesSubstring: \'Pharo\') and: [ \r\t\t(each isKindOf: MCCacheRepository) not ]\r] thenDo: [ :each |\r\tgroup removeRepository: each\r].\r\r#(squeaksource Seaside SvenVan RoelTyper Phexample Magritte STON ShoreLine FastTable Neo ZincHTTPComponents GT StateSpecs SmaCC ProcessWrapper) do: [ :str |\r\tgroup repositories select: [ :each |\r\t\t(each location includesSubstring: str) and: [ \r\t\t\t(each isKindOf: MCCacheRepository) not ]\r\t] thenDo: [ :each |\r\t\tgroup removeRepository: each\r\t].\t\r]'
					},
					QACAction {
						#id : UUID [ '219bb6c5ae666e48be0287f9e13d2686' ],
						#name : 'Setup smalltalkCI',
						#iconID : '',
						#expression : '|ciSpec travisSpec appVeyorSpec repo repos labels|\rciSpec := \'SmalltalkCISpec \\{\r        #loading : [\r                SCIMetacelloLoadSpec \\{\r                        #baseline : \'\'{1}\'\',\r                        #directory : \'\'repository\'\',\r                        #platforms : [ #pharo ]\r                }\r        ],\r        #testing : \\{\r                #packages : [ {2} ]\r        }\r}\'.\r\rtravisSpec := \'language: smalltalk\rsudo: false\r\r# Select operating system(s)\ros:\r  - linux\r\r# Select compatible Smalltalk image(s)\rsmalltalk:\r  - Pharo-6.0\r  - Pharo-5.0\'.\r\rappVeyorSpec := \'environment:\r  CYG_ROOT: C:\\cygwin\r  CYG_BASH: C:\\cygwin\\bin\\bash\r  CYG_CACHE: C:\\cygwin\\var\\cache\\setup\r  CYG_EXE: C:\\cygwin\\setup-x86.exe\r  CYG_MIRROR: http://cygwin.mirror.constant.com\r  SCI_RUN: /cygdrive/c/smalltalkCI-master/run.sh\r  matrix:\r    - SMALLTALK: Pharo-6.0\r    - SMALLTALK: Pharo-5.0\r\rplatform:\r  - x86\r\rinstall:\r  - \'\'%CYG_EXE% -qnNdO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P unzip\'\'\r  - ps: Start-FileDownload "https://github.com/hpi-swa/smalltalkCI/archive/master.zip" "C:\\smalltalkCI.zip"\r  - 7z x C:\\smalltalkCI.zip -oC:\\ -y > NULL\r\rbuild: false\r\rtest_script:\r  - \'\'%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; $SCI_RUN"\'\'\'.\r\rrepos := MCFileTreeGitRepository allInstances sorted: [ :a :b |\r\ta shortDirectoryDescription < b shortDirectoryDescription ].\rlabels := repos collect: #shortDirectoryDescription.\r\rrepo := UIManager default\r\tchooseFrom: labels\r\tvalues: repos.\r\rrepo ifNotNil: [ |dir pkgs base testPkgs|\r\tpkgs := repo directory directories collect: #base.\r\tbase := (pkgs detect: [ :each | each beginsWith: \'BaselineOf\' ]) withoutPrefix: \'BaselineOf\'.\r\ttestPkgs := pkgs reject: [ :each | (each beginsWith: \'BaselineOf\') | (each beginsWith: \'ConfigurationOf\' ) ].\r\ttestPkgs := (testPkgs collect: [ :each | \'\'\'\', each, \'\'\'\' ]) joinUsing: \', \'.\r\tdir := repo directory parent.\r\t(dir / \'.travis.yml\') writeStreamDo: [ :stream |\r\t\tstream wantsLineEndConversion: true.\r\t\tstream nextPutAll: travisSpec\r\t].\r\t(dir / \'.smalltalk.ston\') writeStreamDo: [ :stream |\r\t\tstream wantsLineEndConversion: true.\r\t\tstream nextPutAll: (ciSpec format: { base . testPkgs }).\r\t].\r\t"(dir / \'appveyor.yml\') writeStreamDo: [ :stream |\r\t\tstream wantsLineEndConversion: true.\r\t\tstream nextPutAll: appVeyorSpec\r\t]."\r]'
					},
					QACAction {
						#id : UUID [ '5a8b37b5ec090d00b5645d900da33e08' ],
						#name : 'generate smalltalkci',
						#iconID : '',
						#expression : 'makeConf := [ :baseline | |pkgNames conf|\r\tpkgNames := [ baseline project version packages collect: #name as: Array ].\r\r\tconf := SmalltalkCISpec new.\r\tconf loading: { \r\t\tSCIMetacelloLoadSpec new\r\t\t\tplatforms: #(pharo);\r\t\t\tbaseline: (baseline name withoutPrefix: \'BaselineOf\');\r\t\t\tdirectory: \'repository\'\r\t}.\r\r\tconf testing: {\r\t\t#packages -> pkgNames value.\r\t\t#coverage -> { \r\t\t\t#packages -> pkgNames value\r\t\t} asDictionary\r\t} asDictionary.\r\tconf\r].\r\rwrite := [ :conf :stream |\r\t(STON writer on: stream)\r\t\tprettyPrint: true;\r\t\tnewLine: String lf;\r\t\tjsonMode: false;\r\t\treferencePolicy: #error;\r\t\tnextPut: conf\r].\r\rdoWork := [ :codeDir |\r\troot := (codeDir directories includes: \'.git\') ifTrue: [ codeDir ] ifFalse: [ codeDir parent ].\r\tbaselineDir := codeDir directories detect: [ :each | each basename beginsWith: \'BaselineOf\' ].\r\tbaseline := (baselineDir basename withoutSuffix: \'.package\') asClass.\r\t(root / \'.smalltalk.ston\') ensureDelete; writeStreamDo: [ :stream |\r\t\twrite value: (makeConf value: baseline) value: stream\r\t].\r].\r\rdoWork value: \'D:/pharo-prog/xml-magritte-generator/repository\' asFileReference.\r'
					}
				]
			},
			QACActionFolder {
				#id : UUID [ '4f4913d290220d00ab57bb25030d46fb' ],
				#name : 'Settings',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ '9f9166d290220d00ab588d90030d46fb' ],
						#name : 'NSP+OP dev',
						#iconID : '',
						#expression : 'Sentry enabled: false.\rNSPDeveloperSettings isDevelopmentMode: true.\rOPWorkbench isDevelopmentMode: true.'
					}
				]
			},
			QACActionFolder {
				#id : UUID [ '03ca73e1248b4d7d8c500ba794eee59c' ],
				#name : 'UI',
				#iconID : '',
				#actionItems : SortedCollection [
					QACAction {
						#id : UUID [ 'd2722fb608e6457f8cc52eeb7767c673' ],
						#name : 'Colors',
						#iconID : '',
						#expression : '|v es|\rv := RTView new.\r\res := RTBox new\r\tsize: 150;\r\tcolor: #yourself;\r\telementsOn: (((Color class methods select: [ :each | each protocol = #defaults ] thenCollect: [ :each |\r\t\teach methodClass theNonMetaClass perform: each selector\r\t\t]) reject: #isArray) sorted: [:a :b |\r\t\t\t((0.241 * a red) + (0.691 * a green) + (0.068 * a blue)) sqrt\r\t\t\t<\r\t\t\t((0.241 * b red) + (0.691 * b green) + (0.068 * b blue)) sqrt\r\t\t\r\t\t]).\r\t\rv addAll: es.\res @ (RTLabeled new center).\r\rRTGridLayout new on: es.\r\rv inspect'
					},
					QACAction {
						#id : UUID [ '908458b07e080d008d2eb95b09852aaa' ],
						#name : 'Compact Nautilus size',
						#iconID : '',
						#expression : 'NautilusWindow compile: \'initialExtent\r\t^ 850@530\'.\r\rQANautilusPluginMorph compile: ((QANautilusPluginMorph>>#initialize) sourceCode\r\tcopyReplaceAll: \'51\' with: \'38\').'
					},
					QACAction {
						#id : UUID [ 'ad91b7c5f5314c52b634011673365fdf' ],
						#name : 'Dark Theme',
						#iconID : '',
						#expression : 'Pharo3DarkTheme beCurrent.\r\r"World\r\tbackgroundImage: (ImageReadWriter formFromFileNamed: ((FileLocator home asFileReference / \'Images\' / \'wp\') allFiles atRandom: (Random new seed: UUIDGenerator default makeUnixSeed)))\r\tlayout: #scaled."\r\r(Smalltalk hasClassNamed: #XMLDocumentHighlightDefaults) ifTrue: [ XMLDocumentHighlightDefaults initialize ].\r"\r(Smalltalk hasClassNamed: #TRMorph) ifTrue: [ |clearNode clearLink paintNode paintLink|\rclearNode := (TRMorph>>#drawOn:) ast sendNodes detect: [ :each |\r\teach selector = #clear and: [\r\t\teach receiver name = #surface\r\t]\r].\r\rclearLink := MetaLink new\r\tmetaObject: [ :object |\r\t\t(object instVarNamed: #surface) clear: (object instVarNamed: #trachelCanvas) color.\r\t];\r\tselector: #value:;\r\targuments: #(object);\r\tcontrol: #instead.\r\rclearNode link: clearLink.\r\rpaintNode := (TRMorph>>#drawOn:) ast sendNodes detect: [ :each |\r\teach selector = #hasBeenFreed and: [\r\t\teach receiver name = #surface\r\t]\r].\r\rpaintLink := MetaLink new\r\tmetaObject: [ :object | |surface|\r\t\tsurface := (object instVarNamed: #surface).\r\t\tsurface drawDuring: [ :cs |\r\t\t\tcs paintMode restoreAfter: [\r\t\t\t\t\tcs setPaint: Color white.\r\t\t\t\t\tcs paintMode difference.\r\t\t\t\t\tcs drawShape: (0 @ 0 extent: surface extent)\r\t\t\t]\r\t\t].\r\t];\r\tselector: #value:;\r\targuments: #(object);\r\tcontrol: #after.\r\rpaintNode link: paintLink.\r]"'
					},
					QACAction {
						#id : UUID [ '91a2155f464c4ff0b2fb5f0ee59bc0fa' ],
						#name : 'Light Theme',
						#iconID : '',
						#expression : 'Pharo3Theme beCurrent.\r\r"World\r\tbackgroundImage: (ImageReadWriter formFromFileNamed: ((FileLocator home asFileReference / \'Images\' / \'wp\') allFiles atRandom: (Random new seed: UUIDGenerator default makeUnixSeed)))\r\tlayout: #scaled."\r\t\r(Smalltalk hasClassNamed: #XMLDocumentHighlightDefaults) ifTrue: [ XMLDocumentHighlightDefaults initialize ].\r"\r(Smalltalk hasClassNamed: #TRMorph) ifTrue: [ |clearNode clearLink paintNode paintLink|\rclearNode := (TRMorph>>#drawOn:) ast sendNodes detect: [ :each |\r\teach selector = #clear and: [\r\t\teach receiver name = #surface\r\t]\r].\r\rclearNode links ifNotEmpty: [ :l | l anyOne uninstall ].\r\rpaintNode := (TRMorph>>#drawOn:) ast sendNodes detect: [ :each |\r\teach selector = #hasBeenFreed and: [\r\t\teach receiver name = #surface\r\t]\r].\r\rclearLink links ifNotEmpty: [ :l | l anyOne uninstall ].\r]"'
					},
					QACAction {
						#id : UUID [ '3b45396ca1150d00b693653a04adbfaa' ],
						#name : 'Metal Theme',
						#iconID : '',
						#expression : '(Smalltalk hasClassNamed: #DarkMetalTheme)\r\tifFalse: [ \r\t\tMetacello new \r\t\t\trepository: \'github://estebanlm/themes/mc\';\r\t\t\tbaseline: \'Themes\';\r\t\t\tload.\r\t].\r\r#DarkMetalTheme asClass beCurrent.'
					},
					QACAction {
						#id : UUID [ '5a4c388919abce4d849dc16fa97992ca' ],
						#name : 'OpenPonk logo',
						#iconID : '',
						#expression : 'PolymorphSystemSettings showDesktopLogo: true.\rPolymorphSystemSettings setDesktopLogoWith: (ImageMorph withForm: OPIcons current logo).'
					},
					QACAction {
						#id : UUID [ '0d3262aa9b190d0081203a4f0a325143' ],
						#name : 'Overlay Text',
						#iconID : '',
						#expression : '|font color string window|\rfont := (LogicalFont familyName: \'Source Sans Pro\' pointSize: 50).\rcolor := Color fromHexString: \'3196D3\'.\r\rstring := UIManager default request: \'Text\'.\r\rwindow := (string asText\r\taddAttribute: (TextFontReference toFont: font);\r\taddAttribute: TextEmphasis bold;\r\taddAttribute: (TextColor new color: color);\r\tyourself) asMorph openInWindow.\r\t\rwindow center: Display extent / 2.'
					},
					QACAction {
						#id : UUID [ '1692f97b3618404082ac69f00e546399' ],
						#name : 'Random bing background',
						#iconID : '',
						#expression : '|urlbase image|\rurlbase := ((((STON fromString: ((ZnEasy\r\tget: \'https://www.bing.com/HPImageArchive.aspx?format=js&n=1\') contents)) at: #images) first) at: #urlbase).\rimage := ZnEasy getJpeg: \'https://www.bing.com\', urlbase, \'_1920x1080.jpg\'.\rWorld\r\tbackgroundImage: image\r\tlayout: #scaled.'
					},
					QACAction {
						#id : UUID [ '41e37caea9bc6f478b0c31d313441994' ],
						#name : 'Random dual image',
						#iconID : '',
						#expression : '|home base|\rhome := FileLocator home asFileReference.\rbase := home / \'Pictures\' / \'Dual\'. \rWorld\r\tbackgroundImage: (ImageReadWriter formFromFileNamed: (base allFiles atRandom))\r\tlayout: #scaled.'
					},
					QACAction {
						#id : UUID [ 'd20d0a28c4ee41fd92d0dd242b43d2ce' ],
						#name : 'Random non-recent local image',
						#iconID : '',
						#expression : '|home base|\rhome := FileLocator home asFileReference.\rbase := OSPlatform current isUnix\n\tifTrue: [ home / \'Images\' / \'wp\' ]\n\tifFalse: [ home / \'Pictures\' / \'Wallpapers\' ]. \rWorld\r\tbackgroundImage: (ImageReadWriter formFromFileNamed: (base allFiles atRandom))\r\tlayout: #scaled.'
					},
					QACAction {
						#id : UUID [ '16f5c66c1af345af92a306ec3c98116e' ],
						#name : 'Random recent local image',
						#iconID : '',
						#expression : '|home base|\rhome := FileLocator home asFileReference.\rbase := OSPlatform current isUnix\n\tifTrue: [ home / \'Images\' / \'wp\' ]\n\tifFalse: [ home / \'Pictures\' / \'Wallpapers\' ]. \rWorld\r\tbackgroundImage: (ImageReadWriter formFromFileNamed: ((base / \'2016\') allFiles atRandom: (Random new seed: UUIDGenerator default makeSeed)))\r\tlayout: #scaled.'
					},
					QACAction {
						#id : UUID [ '7f8169c474c043f09b1f812b43895cfe' ],
						#name : 'Reopen Nautilus',
						#iconID : '',
						#expression : '(NautilusUI allInstances select: [ :each | each window owner = World ])\r\tdo: [ :each | |new|\r\t\tnew := each fullBrowse.\r\t\tnew ui window position: each window position.\r\t\teach close.\r\t].'
					},
					QACAction {
						#id : UUID [ '00bbc1af7e080d008d2df18209852aaa' ],
						#name : 'Standard Nautilus size',
						#iconID : '',
						#expression : 'NautilusWindow compile: \'initialExtent\r\t^ 850@620\'.\r\r(QANautilusPluginMorph>>#initialize) sourceCode\r\tcopyReplaceAll: \'38\' with: \'51\'.'
					},
					QACAction {
						#id : UUID [ '38b4535bbe230d00984a0f0a01ed2a9b' ],
						#name : 'Text Logo',
						#iconID : '',
						#expression : '|font color string textMorph|\rfont := (LogicalFont familyName: \'Source Sans Pro\' pointSize: 30).\rcolor := Color fromHexString: \'3196D3\'.\r\rstring := UIManager default request: \'Text\'.\r\rtextMorph := (string asText\r\taddAttribute: (TextFontReference toFont: font);\r\taddAttribute: TextEmphasis bold;\r\taddAttribute: (TextColor new color: color);\r\tyourself) asMorph.\r\t\rPolymorphSystemSettings setDesktopLogoWith: textMorph.\r\rPolymorphSystemSettings desktopLogo position: 5 @ 0.'
					},
					QACAction {
						#id : UUID [ 'e9711d69ad240d00a2f9c9ca00e06915' ],
						#name : 'Text Logo (top offset)',
						#iconID : '',
						#expression : '|font color string textMorph|\rfont := (LogicalFont familyName: \'Source Sans Pro\' pointSize: 30).\rcolor := Color fromHexString: \'3196D3\'.\r\rstring := UIManager default request: \'Text\'.\r\rtextMorph := (string asText\r\taddAttribute: (TextFontReference toFont: font);\r\taddAttribute: TextEmphasis bold;\r\taddAttribute: (TextColor new color: color);\r\tyourself) asMorph.\r\t\rPolymorphSystemSettings setDesktopLogoWith: textMorph.\r\rPolymorphSystemSettings desktopLogo position: 0 @ 20.'
					}
				]
			},
			QACAction {
				#id : UUID [ 'd7d7c3a2034849fd833cfe60fe053e45' ],
				#name : 'Unnamed action',
				#iconID : '',
				#expression : ''
			},
			QACAction {
				#id : UUID [ '46a1275c545340a8b5b5f188c834e5ef' ],
				#name : 'Unnamed action',
				#iconID : '',
				#expression : ''
			}
		]
	}
}